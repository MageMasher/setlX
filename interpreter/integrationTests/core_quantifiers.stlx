load("baseIntegrationTest.stlx");
registerTestSuite("core_quantifiers");

// ************************************************************************** \\

forallTests := procedure() {
    a := b := c := d := "test";
    // none fails
    e := forall(a in [1 .. 5], b in [1 .. 5] | a * b <= 25);
    // first fail: c == 4, d == 4
    f := forall(c in [1 .. 5], d in [1 .. 5] | (c * d) < 16);

    registerTestResult(a == om && b == om && e && c == 4 && d == 4 && !f, "forall");
};
forallTests();

existsTests := procedure() {
    a := b := c := d := "test";
    // first exists: a == 4, b == 4
    e := exists(a in [1 .. 5], b in [1 .. 5] | a * b >= 16);
    // nothing exists
    f := exists(c in [1 .. 5], d in [1 .. 5] | c * d > 25);

    registerTestResult(a == 4 && b == 4 && e && c == om && d == om && !f, "exists");
};
existsTests();

recurringVariable := procedure() {
    isRightUnique := procedure(r) {
        return forall([x,y1] in r, [x,y2] in r | y1 == y2);
    };

    registerTestResult(isRightUnique({[1, 1], [2, 2]}) == true,  "recurringVariable: isRightUnique 1");
    registerTestResult(isRightUnique({[1, 1], [1, 2]}) == false, "recurringVariable: isRightUnique 2");
};
recurringVariable();

nestedForall := procedure() {
    isRightUniqueClumsy := procedure(r) {
        return forall([x1,y1] in r | forall([x2,y2] in r | x1 == x2 => y1 == y2));
    };

    registerTestResult(isRightUniqueClumsy({[1, 1], [2, 2]}) == true,  "nestedForall: isRightUniqueClumsy 1");
    registerTestResult(isRightUniqueClumsy({[1, 1], [1, 2]}) == false, "nestedForall: isRightUniqueClumsy 2");
};
nestedForall();

// ************************************************************************** \\

printTestResult();

