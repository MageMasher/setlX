load("baseIntegrationTest.stlx");
registerTestSuite("core_terms");

// ************************************************************************** \\

lazyTermsConjunction := procedure() {
    s := @f();
    t := @g();
    r := s && t;

    validateForTestCase("lazyTermsConjunction")
        .that(
            canonical(r)
        ).is(
            "@@@conjunction(@f(), @g())"
        );
};
lazyTermsConjunction();

lazyTermsDisjunction := procedure() {
    s := @f();
    t := @g();
    r := s || t;

    validateForTestCase("lazyTermsDisjunction")
        .that(
            canonical(r)
        ).is(
            "@@@disjunction(@f(), @g())"
        );
};
lazyTermsDisjunction();

viralBooleanEqual := procedure() {
    x := parse("a ** b");
    y := parse("a ** b");

    validateForTestCase("viralBooleanEqual: terms with equal")
        .that(
            x == y
        ).is(
            true
        );

    validateForTestCase("viralBooleanEqual: terms with not equal")
        .that(
            x != y
        ).is(
            false
        );
    validateForTestCase("viralBooleanEqual: terms with boolean equal")
        .that(
            canonical(x <==> y)
         ).is(
            "@@@booleanEqual(@@@power(@@@variable(\"a\"), @@@variable(\"b\")), @@@power(@@@variable(\"a\"), @@@variable(\"b\")))"
         );
    validateForTestCase("viralBooleanEqual: terms with boolean not equal")
        .that(
            canonical(x <!=> y)
         ).is(
            "@@@booleanNotEqual(@@@power(@@@variable(\"a\"), @@@variable(\"b\")), @@@power(@@@variable(\"a\"), @@@variable(\"b\")))"
         );
};
viralBooleanEqual();

// ************************************************************************** \\

printTestResult();

