load("baseIntegrationTest.stlx");
registerTestSuite("core");

// ************************************************************************** \\

fromWithoutSideEffect := procedure() {
    a := {{1}, {2}};
    b := {{3}, {4}};
    c := a + b;
    d := from(c);

    registerTestResult(a == {{1}, {2}} && b == {{3}, {4}} && #c == 3, "side-effects in from");
};
fromWithoutSideEffect();

fromListWithoutSideEffect := procedure() {
    a := [{1}, {2}];
    b := [{3}, {4}];
    c := a + b;
    d := from(c);

    registerTestResult(a == [{1}, {2}] && b == [{3}, {4}] && #c == 3, "side-effects in from lists");
};
fromListWithoutSideEffect();

fromVariable := procedure() {
    a := {{1}, {2}};
    b := a;
    d := from(a);

    registerTestResult(#a == 1 && b == {{1}, {2}}, "from variable");
};
fromVariable();

listIndex := procedure() {
    a := [1];
    b := a[2..];
    c := [1, 2, 4];
    d := c[10];
    e := c[2..3][1];

    registerTestResult(b == [] && d == om && e == 2, "list index");
};
listIndex();

collectionsWithOm := procedure() {
    a := [1, om];
    b := {1, om};
    c := [1, om, 3];
    d := {1, om, 3};

    registerTestResult(a == [1] && b == {1} && c == [1, om, 3] && d == {1, 3}, "collections with om");
};
collectionsWithOm();

listAssignments := procedure() {
    [a, b, c] := [1, 2, 3];
    [[d, e], f] := [[4, 5], 6];
    [g, h, i] := "123";
    [j, k, l] := @term("foobar", 99, sin);

    registerTestResult(a == 1   && b == 2   && c == 3   && d == 4        && e == 5  && f == 6            &&
           g == "1" && h == "2" && i == "3" && j == "foobar" && k == 99 && l == getTerm(sin),
           "list assignments");
};
listAssignments();

innerListAssignments := procedure() {
    a := [1, 2, 3];
    a[2] := 6;
    b := [[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]];
    b[3][1][2] := "t";
    c := [1, 2, 3];
    c[6] := 10;
    d := c;
    d[6] := om;

    registerTestResult(a == [1, 6, 3] && b == [[[1, 2, 3]], [[4, 5, 6]], [[7, "t", 9]]] &&
           c == [1, 2, 3, om, om, 10] && d == [1, 2, 3], "assignments to list content");
};
innerListAssignments();

firstClassFunctions := procedure() {
    test := procedure(m, am) {
        return 1 - m(0) == am(0);
    };

    boxOfMystery := {cos, sin};
    mystery := arb(boxOfMystery);
    anotherMystery := +/ (boxOfMystery - {mystery});

    registerTestResult(test(mystery, anotherMystery), "first class functions");
};
firstClassFunctions();

nestedFunctions := procedure() {
    callCopysOnlyFunctions := procedure() {
        return omTo42(y);
    };

    screwedSin := procedure(x) {
        return sin(x) + x;
    };

    omTo42 := procedure(x) {
        if (x == om) {
            return 42;
        } else {
            return false;
        }
    };

    y := screwedSin(1);
    z := callCopysOnlyFunctions();

    registerTestResult(y > 0.8414 + 1 && y < 0.8415 + 1 && z == 42, "nested functions");
};
nestedFunctions();

iterator := procedure() {
    u := [[x, y, z, w]: x in {1, 2}, y in {1, 2}, [z, w] in [[x, y]]];

    registerTestResult(u == [[1, 1, 1, 1], [1, 2, 1, 2], [2, 1, 2, 1], [2, 2, 2, 2]], "iterators");
};
iterator();

scopeTests := procedure() {
    result := "";
    q := [[[1, 2, 3], [4, 5, 6]]];
    for (q1 in q, q2 in q1, q3 in q2) {
        result := result + " " + q3;
        q2 := "foo";
        p  := "test";
    }
    while (p == "test") {
        p := p[2..];
    }
    v := "test";
    w := {v: w in q, v in w};

    registerTestResult(result == " 1 2 3 4 5 6" && q == [[[1, 2, 3], [4, 5, 6]]] && p == "est" && v == "test", "scope");
};
scopeTests();

lazyChecking := procedure() {
    correct := false;
    a := b := 1;
    increaseTrue := procedure (rw x) {
        x += 1;
        return true;
    };
    increaseFalse := procedure (rw x) {
        x += 1;
        return false;
    };

    // true and true (not lazy-checkable)
    c := increaseTrue(a) && increaseTrue(b);
    // now a and b should be 2, c should be true
    correct := a == 2 && b == 2 && c;

    // false and true (lazy-checkable)
    c := increaseFalse(a) && increaseTrue(b);
    // now a should be 3, but b still 2, c should be false
    correct := correct && a == 3 && b == 2 && !c;

    registerTestResult(correct, "lazy checking");
};
lazyChecking();

relationExtension := procedure() {
    correct := false;

    r := { [n, n*n] : n in {1..3} };

    correct := r == {[1, 1], [2, 4], [3, 9]};

    /* change value of pair [2, 4] to [2, 3] */
    r[2] := 3;

    correct := correct && r == {[1, 1], [2, 3], [3, 9]};

    /* add pair [4, 5] */
    r[4] := 5;

    correct := correct && r == {[1, 1], [2, 3], [3, 9], [4, 5]};

    registerTestResult(correct, "relation extension");
};
relationExtension();

formatedString := procedure() {
    correct := false;

    s := "";
    for (i in [1 .. 9]) {
          s += "p$i$ || ";
    }
    s := s + "false";

    correct := s == "p1 || p2 || p3 || p4 || p5 || p6 || p7 || p8 || p9 || false";

    registerTestResult(correct, "formated string");
};
formatedString();

precedences := procedure() {
    a := str(   @@@conjunction(@@@disjunction(@@@disjunction(     @@@variable("a"),       @@@variable("b")   ),
                                          @@@conjunction(@@@not(@@@variable("a")), @@@not(@@@variable("b"))  )
                                         ),
                             @@@disjunction(@@@disjunction(     @@@variable("a"),       @@@variable("b")   ),
                                          @@@conjunction(@@@not(@@@variable("a")), @@@not(@@@variable("b"))  )
                                         )
                            )
            );

    registerTestResult(a == "(a || b || !a && !b) && (a || b || !a && !b)", "precedences");
};
precedences();

complexLhsAssignment := procedure() {
    a := [ [11, 12, 13], [21, 22, 23], [31, 32, 33] ];
    a[2][4] := 24;
    a[3][2] *= 10;
    [a[1], a[2]] := [a[2], a[1]];
    [a[1][1], a[2][2]] := [a[2][2], a[1][1]];

    registerTestResult(a == [[12, 22, 23, 24], [11, 21, 13], [31, 320, 33]], "complex lhs assignment");
};
complexLhsAssignment();

valueVsReference := procedure() {
    l1 := [ 1, 2, 3 ];
    l2 := l1;
    l2[2] := 5;

    correct := l1 == [1, 2, 3] && l2 == [1, 5, 3];

    s := { l1, l2 };

    correct := correct && s == {[1, 2, 3], [1, 5, 3]};

    l1[1] := 17;

    correct := correct && l1 == [17, 2, 3] && s == {[1, 2, 3], [1, 5, 3]};

    // another sanity check

    correct := correct && l2 in s;

    registerTestResult(correct, "value vs reference");
};
valueVsReference();

matchSets := procedure() {
    s := { "a", 1 };

    match(s) {
        case { "a", x }:
            correct := x == 1;
        case { 1, x }:
            correct := false;
    }

    registerTestResult(correct, "match sets");
};
matchSets();

complexIndirectAssignment := procedure() {
    s := { ["a", 1], ["b", [1]]};
    s["a"] += 2;
    s["b"] += [2];

    correct := s == { ["a", 3], ["b", [1, 2]] };

    registerTestResult(correct, "complex indirect assignment");
};
complexIndirectAssignment();

grammarTests := procedure() {
    correct := true;
    try {

        // combine forall with other conditions
        if (true && forall(x in [1..10] | x < 11) && 1 == 1) {
            correct := correct && true;
        } else {
            correct := false;
        }
        if (forall(x in [1..10] | x < 10) || true) {
            correct := correct && true;
        } else {
            correct := false;
        }

        // negative numbers vs unary minus vs binary minus
        if (parseStatements("x := -2;") == @@@block([@@@assignment(@@@variable("x"), @@@minus(2))])) {
            correct := correct && true;
        } else {
            correct := false;
        }
        if (parseStatements("x:= x-2;") == @@@block([@@@assignment(@@@variable("x"), @@@difference(@@@variable("x"), 2))])) {
            correct := correct && true;
        } else {
            correct := false;
        }
        if (parseStatements("x := x-2*x;") == @@@block([@@@assignment(@@@variable("x"), @@@difference(@@@variable("x"), @@@product(2, @@@variable("x"))))])) {
            correct := correct && true;
        } else {
            correct := false;
        }

    } catch (error) {
        // any parser error fails the test
        correct := false;
    }

    registerTestResult(correct, "grammar");
};
grammarTests();

regexEscapeTests := procedure() {
    correct := true;

    // using literals, thus using no extra level of backslash-escaping
    s := "1\\2\\3";
    correct := correct && (split(s, '\w') == ["","\\","\\",""]);

    s := "1\\2\\3";
    correct := correct && (split(s, '\\') == ["1","2","3"]);

    // using strings, thus using one more level of backslash-escaping
    s := "1\\2\\3";
    correct := correct && (split(s, "\\w") == ["","\\","\\",""]);

    s := "1\\2\\3";
    correct := correct && (split(s, "\\\\") == ["1","2","3"]);

    registerTestResult(correct, "regexEscape");
};
regexEscapeTests();

cacheTest := procedure() {
    correct := true;

    // This test checks if procedures cache correctly when calling themselves recursevely
    //
    // Original bug was that `f' was detected (correctly) as closure variable, as it is
    // called from within this procedure, but not defined when the procedure is defined.
    f := cachedProcedure(n,t){
        if (n==0) {
            return 1;
        } else {
            return f(n-1,t);
        }
    };

    for (n in [1..3]) {
        for (t in [[1,2],[3,4]]) {
            correct := correct && f(n,t) == 1;
        }
    }
    correct := correct && cacheStats(f) == {["cache hits", 4], ["cached items", 8]};

    // When one then would redefine `f', the `f' from above _would_ be defined and
    // thus be taken as closure variable.
    // When executing the redefined `f', it would put a copy of the old `f' into its
    // own state (closure functionality) and thus circumvent the cache and worse
    // behave like the old `f' during the recursion step.
    //
    // Bugfix was to check for existing bindings reachable from current scope
    // when setting closure variables and skip when there are some.
    f := cachedProcedure(n,t){
        if (n==0) {
            return 2;
        } else {
            return f(n-1,t);
        }
    };

    for (n in [1..3]) {
        for (t in [[1,2],[3,4]]) {
            correct := correct && f(n,t) == 2;
        }
    }
    correct := correct && cacheStats(f) == {["cache hits", 4], ["cached items", 8]};

    registerTestResult(correct, "cacheTest");
};
cacheTest();

// ************************************************************************** \\

printTestResult();

